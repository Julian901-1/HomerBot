/**
 * GOOGLE APPS SCRIPT –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –° TELEGRAM WALLET
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * –í–µ—Ä—Å–∏—è: 2.1 - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram callback –∏ webhook
 */

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const SHEET_ID = '1eG_c2RcYcZs6jkJIPi8x4QXJBTBKTf2FwA33Ct7KxHg';
const SHEET_NAME = 'HomerBot';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
const BOT_TOKEN = '7631840452:AAH4O93qQ6J914x5FhPTQX7YhJC3bTiJ_XA';
const ADMIN_CHAT_ID = '487525838';
var paymentStatuses = {};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function doPost(e) {
  try {
    Logger.log('POST request received');
    Logger.log('Raw data: ' + e.postData.contents);
    
    const data = JSON.parse(e.postData.contents);
    Logger.log('Parsed data: ' + JSON.stringify(data));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Telegram webhook
    if (data.callback_query) {
      Logger.log('Handling Telegram callback');
      return handleTelegramCallback(data.callback_query);
    }
    
    Logger.log('Handling action: ' + data.action);
    
    switch(data.action) {
      case 'updateBalance':
        return updateUserBalance(data.username, data.strategy, data.balance);
      case 'forceUpdateBalance':
        return forceUpdateBalance(data.username, data.newBalance);
      case 'sendNotification':
        return handleNotification(data);
      case 'setupWebhook':
        return createResponse(setupTelegramWebhook());
      case 'forceSetupWebhook':
        return createResponse(setupTelegramWebhook());
      case 'sendTestMessage':
        return sendTestWebhookMessage(data.chatId, data.message);
      default:
        Logger.log('Unknown action: ' + data.action);
        return createResponse({ 
          error: 'Unknown action: ' + data.action,
          availableActions: ['updateBalance', 'forceUpdateBalance', 'sendNotification']
        });
    }
  } catch (error) {
    Logger.log('Error in doPost: ' + error.toString());
    Logger.log('Error stack: ' + error.stack);
    return createResponse({ error: error.toString() });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function doGet(e) {
  try {
    const action = e.parameter.action;
    Logger.log('GET request received with action: ' + action);
    
    switch(action) {
      case 'getBalance':
        return getBalanceByUsername(e.parameter.username);
      case 'getAllUsers':
        return getAllUsers();
      case 'checkPayment':
        const transactionId = e.parameter.transactionId;
        const status = paymentStatuses[transactionId] || { confirmed: false };
        return createResponse(status);
      case 'test':
        return createResponse({ 
          success: true, 
          message: 'Google Apps Script is working!', 
          timestamp: new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }),
          version: '2.1'
        });
      case 'getWebhookInfo':
        return createResponse({ result: getWebhookInfo() });
      default:
        return createResponse({ 
          error: 'Unknown action: ' + action,
          availableActions: ['getBalance', 'getAllUsers', 'checkPayment', 'test']
        });
    }
  } catch (error) {
    Logger.log('Error in doGet: ' + error.toString());
    return createResponse({ error: error.toString() });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram callback –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function handleTelegramCallback(callbackQuery) {
  try {
    const callbackData = callbackQuery.data;
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    
    Logger.log('Received callback: ' + callbackData);
    
    if (callbackData.startsWith('confirm_')) {
      const parts = callbackData.split('_');
      const transactionId = parts[1];
      const amount = parseFloat(parts[2]);
      let username = parts[3] || 'unknown_user';
      
      // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
      const searchUsername = username.startsWith('@') ? username.substring(1) : username;
      
      Logger.log(`Processing payment for user: ${username}, amount: ${amount}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      paymentStatuses[transactionId] = { confirmed: true, amount: amount, username: username };
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
      const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
      const data = sheet.getDataRange().getValues();
      
      let userRowIndex = -1;
      for (let i = 1; i < data.length; i++) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å @ –∏ –±–µ–∑ @
        if (data[i][0] === username || data[i][0] === searchUsername || 
            data[i][0] === '@' + searchUsername) {
          userRowIndex = i + 1;
          break;
        }
      }
      
      let newBalance;
      if (userRowIndex > 0) {
        const currentBalance = sheet.getRange(userRowIndex, 3).getValue() || 0;
        newBalance = currentBalance + amount;
        sheet.getRange(userRowIndex, 3).setValue(newBalance);
        sheet.getRange(userRowIndex, 4).setValue(new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }));
        
        Logger.log(`Payment confirmed for ${username}: +${amount}, new balance: ${newBalance}`);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
        newBalance = amount;
        sheet.appendRow([username, 'standard', amount, timestamp]);
        Logger.log(`New user created: ${username} with payment: ${amount}`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
      paymentStatuses[transactionId] = { 
        confirmed: true, 
        amount: amount, 
        username: username,
        newBalance: newBalance
      };
      
      answerCallbackQuery(callbackQuery.id, '–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
      editMessageText(chatId, messageId, `‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n–°—É–º–º–∞: ${amount} ‚úß\nID: ${transactionId}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} ‚úß`);
      
    } else if (callbackData.startsWith('reject_')) {
      const parts = callbackData.split('_');
      const transactionId = parts[1];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
      paymentStatuses[transactionId] = { confirmed: false, rejected: true };
      
      Logger.log(`Payment rejected for transaction: ${transactionId}`);
      
      answerCallbackQuery(callbackQuery.id, '–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      editMessageText(chatId, messageId, `‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω\nID: ${transactionId}\n–ü—Ä–∏—á–∏–Ω–∞: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
      
    } else if (callbackData.startsWith('test_confirm_') || callbackData.startsWith('test_reject_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
      const isConfirm = callbackData.startsWith('test_confirm_');
      const testId = callbackData.split('_')[2];
      
      Logger.log(`Test callback received: ${callbackData}`);
      
      answerCallbackQuery(callbackQuery.id, isConfirm ? '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!' : '–¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      editMessageText(chatId, messageId, `${isConfirm ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç webhook ${isConfirm ? '—É—Å–ø–µ—à–µ–Ω' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}!\n\nWebhook —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.`);
    }
    
    return createResponse({ success: true });
  } catch (error) {
    Logger.log('Error handling callback: ' + error.toString());
    return createResponse({ error: error.toString() });
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query
 */
function answerCallbackQuery(callbackQueryId, text) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`;
  const payload = {
    callback_query_id: callbackQueryId,
    text: text,
    show_alert: false
  };
  
  UrlFetchApp.fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    payload: JSON.stringify(payload)
  });
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function editMessageText(chatId, messageId, text) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/editMessageText`;
  const payload = {
    chat_id: chatId,
    message_id: messageId,
    text: text
  };
  
  UrlFetchApp.fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    payload: JSON.stringify(payload)
  });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook
 */
function setupTelegramWebhook() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º URL —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    const webhookUrl = ScriptApp.getService().getUrl();
    
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`;
    const payload = {
      url: webhookUrl
    };
    
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      payload: JSON.stringify(payload)
    });
    
    const result = JSON.parse(response.getContentText());
    Logger.log('Webhook setup result:', result);
    
    if (result.ok) {
      sendAdminNotification('üîó Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    } else {
      sendAdminNotification('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ' + result.description);
    }
    
    return result;
  } catch (error) {
    Logger.log('Error setting up webhook: ' + error.toString());
    sendAdminNotification('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ' + error.toString());
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
 */
function getWebhookInfo() {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`;
    const response = UrlFetchApp.fetch(url);
    const result = JSON.parse(response.getContentText());
    
    Logger.log('Webhook info:', result);
    return result;
  } catch (error) {
    Logger.log('Error getting webhook info: ' + error.toString());
    return null;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function updateUserBalance(username, strategy, balance) {
  try {
    Logger.log(`Updating balance for user: ${username}, strategy: ${strategy}, balance: ${balance}`);
    
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
    const data = sheet.getDataRange().getValues();
    
    Logger.log(`Sheet has ${data.length} rows`);
    
    // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    const searchUsername = username.startsWith('@') ? username.substring(1) : username;
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏)
    let userRowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å @ –∏ –±–µ–∑ @
      if (data[i][0] === username || data[i][0] === searchUsername || 
          data[i][0] === '@' + searchUsername) {
        userRowIndex = i + 1;
        Logger.log(`User found at row ${userRowIndex}`);
        break;
      }
    }
    
    const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    if (userRowIndex === -1) {
      sheet.appendRow([username, strategy, balance, timestamp]);
      Logger.log(`New user added: ${username}, strategy: ${strategy}, balance: ${balance}`);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      const currentSheetBalance = data[userRowIndex - 1][2] || 0;
      const balanceDifference = Math.abs(currentSheetBalance - balance);
      
      Logger.log(`Current sheet balance: ${currentSheetBalance}, App balance: ${balance}, Difference: ${balanceDifference}`);
      
      if (balanceDifference > 1 && currentSheetBalance !== balance) {
        Logger.log(`Admin may have changed balance for ${username}. Sheet: ${currentSheetBalance}, App: ${balance}`);
        return createResponse({ 
          success: true, 
          message: 'Balance not updated - admin override detected',
          adminBalance: currentSheetBalance 
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
      sheet.getRange(userRowIndex, 2).setValue(strategy);
      sheet.getRange(userRowIndex, 3).setValue(balance);
      sheet.getRange(userRowIndex, 4).setValue(timestamp);
      Logger.log(`User updated: ${username}, strategy: ${strategy}, balance: ${balance}`);
    }
    
    return createResponse({ success: true, message: 'Balance updated successfully' });
  } catch (error) {
    Logger.log('Error updating balance: ' + error.toString());
    Logger.log('Error stack: ' + error.stack);
    return createResponse({ error: error.toString() });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
 */
function getBalanceByUsername(username) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
    const data = sheet.getDataRange().getValues();
    
    // –£–±–∏—Ä–∞–µ–º @ –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const searchUsername = username.startsWith('@') ? username.substring(1) : username;
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏)
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === username || data[i][0] === searchUsername || 
          data[i][0] === '@' + searchUsername) {
        return createResponse({ 
          balance: data[i][2] || 1000,
          strategy: data[i][1] || 'standard',
          username: data[i][0],
          lastUpdate: data[i][3] || ''
        });
      }
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const defaultBalance = 1000;
    const defaultStrategy = 'standard';
    const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    
    sheet.appendRow([username, defaultStrategy, defaultBalance, timestamp]);
    Logger.log(`New user created with defaults: ${username}`);
    
    return createResponse({ 
      balance: defaultBalance, 
      strategy: defaultStrategy,
      username: username,
      lastUpdate: timestamp
    });
  } catch (error) {
    Logger.log('Error getting balance: ' + error.toString());
    return createResponse({ error: error.toString() });
  }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
function forceUpdateBalance(username, newBalance) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === username) {
        const oldBalance = data[i][2];
        sheet.getRange(i + 1, 3).setValue(newBalance);
        sheet.getRange(i + 1, 4).setValue(new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }));
        
        Logger.log(`Admin force updated balance for ${username}: ${oldBalance} -> ${newBalance}`);
        sendAdminNotification(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –∏–∑–º–µ–Ω–µ–Ω: ${oldBalance} ‚Üí ${newBalance} ‚úß`);
        
        return true;
      }
    }
    
    return false;
  } catch (error) {
    Logger.log('Error force updating balance: ' + error.toString());
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function getAllUsers() {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
    const data = sheet.getDataRange().getValues();
    
    const users = [];
    for (let i = 1; i < data.length; i++) {
      if (data[i][0]) {
        users.push({
          username: data[i][0],
          strategy: data[i][1] || 'standard',
          balance: data[i][2] || 0,
          lastUpdate: data[i][3] || ''
        });
      }
    }
    
    return createResponse({ users: users });
  } catch (error) {
    Logger.log('Error getting all users: ' + error.toString());
    return createResponse({ error: error.toString(), users: [] });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function handleNotification(data) {
  try {
    Logger.log('Handling notification:', data);
    
    switch(data.type) {
      case 'deposit':
        return handleDepositNotification(data);
      case 'withdraw':
        return handleWithdrawNotification(data);
      case 'strategy_change':
        return handleStrategyChangeNotification(data);
      default:
        Logger.log('Unknown notification type:', data.type);
        return createResponse({ error: 'Unknown notification type' });
    }
  } catch (error) {
    Logger.log('Error handling notification: ' + error.toString());
    return createResponse({ error: error.toString() });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–µ
 */
function handleDepositNotification(data) {
  try {
    const keyboard = {
      inline_keyboard: [[
        { text: '–î–∞', callback_data: `confirm_${data.transactionId}_${data.amount}_${data.userId}` },
        { text: '–ù–µ—Ç', callback_data: `reject_${data.transactionId}` }
      ]]
    };

    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
      chat_id: ADMIN_CHAT_ID,
      text: data.message,
      reply_markup: JSON.stringify(keyboard)
    };
    
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      payload: JSON.stringify(payload)
    });
    
    const result = JSON.parse(response.getContentText());
    Logger.log('Deposit notification sent:', result);
    
    return createResponse({ 
      success: true, 
      messageId: result.result ? result.result.message_id : null 
    });
  } catch (error) {
    Logger.log('Error sending deposit notification: ' + error.toString());
    return createResponse({ error: error.toString() });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–µ
 */
function handleWithdrawNotification(data) {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
      chat_id: ADMIN_CHAT_ID,
      text: data.message,
      parse_mode: 'HTML'
    };
    
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      payload: JSON.stringify(payload)
    });
    
    const result = JSON.parse(response.getContentText());
    Logger.log('Withdraw notification sent:', result);
    
    return createResponse({ success: true });
  } catch (error) {
    Logger.log('Error sending withdraw notification: ' + error.toString());
    return createResponse({ error: error.toString() });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 */
function handleStrategyChangeNotification(data) {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
      chat_id: ADMIN_CHAT_ID,
      text: data.message,
      parse_mode: 'HTML'
    };
    
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      payload: JSON.stringify(payload)
    });
    
    const result = JSON.parse(response.getContentText());
    Logger.log('Strategy change notification sent:', result);
    
    return createResponse({ success: true });
  } catch (error) {
    Logger.log('Error sending strategy change notification: ' + error.toString());
    return createResponse({ error: error.toString() });
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook
 */
function sendTestWebhookMessage(chatId, message) {
  try {
    const keyboard = {
      inline_keyboard: [[
        { text: '‚úÖ –î–∞', callback_data: 'test_confirm_' + Date.now() },
        { text: '‚ùå –ù–µ—Ç', callback_data: 'test_reject_' + Date.now() }
      ]]
    };

    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
      chat_id: chatId || ADMIN_CHAT_ID,
      text: message || 'üß™ –¢–µ—Å—Ç webhook - –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É',
      reply_markup: JSON.stringify(keyboard)
    };
    
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      payload: JSON.stringify(payload)
    });
    
    const result = JSON.parse(response.getContentText());
    Logger.log('Test message sent:', result);
    
    return createResponse({ 
      success: result.ok, 
      result: result,
      messageId: result.result ? result.result.message_id : null 
    });
  } catch (error) {
    Logger.log('Error sending test message: ' + error.toString());
    return createResponse({ error: error.toString() });
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 */
function sendAdminNotification(message) {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
      chat_id: ADMIN_CHAT_ID,
      text: `üîß ${message}`,
      parse_mode: 'HTML'
    };
    
    UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      payload: JSON.stringify(payload)
    });
    
    Logger.log('Admin notification sent: ' + message);
  } catch (error) {
    Logger.log('Error sending admin notification: ' + error.toString());
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
 */
function createResponse(data) {
  return ContentService
    .createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
 */
function initializeSheet() {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const firstRow = sheet.getRange(1, 1, 1, 4).getValues()[0];
    
    if (!firstRow[0] || firstRow[0] !== 'Username') {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      sheet.getRange(1, 1, 1, 4).setValues([['Username', 'Strategy', 'Balance', 'Last Update']]);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headerRange = sheet.getRange(1, 1, 1, 4);
      headerRange.setFontWeight('bold');
      headerRange.setBackground('#4285f4');
      headerRange.setFontColor('#ffffff');
      
      Logger.log('Sheet initialized with headers');
      sendAdminNotification('üìã –¢–∞–±–ª–∏—Ü–∞ HomerBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏');
    }
    
    return true;
  } catch (error) {
    Logger.log('Error initializing sheet: ' + error.toString());
    return false;
  }
}

/**
 * –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò
 */
function testAddUser() {
  const result = updateUserBalance('testuser', 'balanced', 5000);
  Logger.log('Test add user result: ' + result.getContent());
}

function testGetBalance() {
  const result = getBalanceByUsername('testuser');
  Logger.log('Test get balance result: ' + result.getContent());
}

function testWebhookSetup() {
  const result = setupTelegramWebhook();
  Logger.log('Webhook setup test result:', result);
}

/**
 * –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø
 */

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
 * –ü–æ–ª–µ–∑–Ω–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
 */
function massBalanceUpdate(multiplier = 1.1) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
    const data = sheet.getDataRange().getValues();
    let updatedCount = 0;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] && data[i][2]) { // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å
        const oldBalance = data[i][2];
        const newBalance = oldBalance * multiplier;
        sheet.getRange(i + 1, 3).setValue(newBalance);
        sheet.getRange(i + 1, 4).setValue(new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }));
        updatedCount++;
      }
    }
    
    const message = `–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º ${multiplier}`;
    Logger.log(message);
    sendAdminNotification(message);
    
    return updatedCount;
  } catch (error) {
    Logger.log('Error in mass balance update: ' + error.toString());
    return 0;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º 0 –∏–ª–∏ –ø—É—Å—Ç—ã–º –±–∞–ª–∞–Ω—Å–æ–º
 */
function cleanInactiveUsers() {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
    const data = sheet.getDataRange().getValues();
    let deletedCount = 0;
    
    // –ò–¥–µ–º —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    for (let i = data.length - 1; i >= 1; i--) {
      if (data[i][2] === 0 || data[i][2] === '' || data[i][2] === null) {
        sheet.deleteRow(i + 1);
        deletedCount++;
      }
    }
    
    const message = `–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –∑–∞–ø–∏—Å–µ–π`;
    Logger.log(message);
    sendAdminNotification(message);
    
    return deletedCount;
  } catch (error) {
    Logger.log('Error cleaning inactive users: ' + error.toString());
    return 0;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function getStatistics() {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
    const data = sheet.getDataRange().getValues();
    
    let totalUsers = 0;
    let totalBalance = 0;
    const strategies = { standard: 0, balanced: 0, aggressive: 0 };
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0]) { // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        totalUsers++;
        totalBalance += data[i][2] || 0;
        
        const strategy = data[i][1] || 'standard';
        if (strategies[strategy] !== undefined) {
          strategies[strategy]++;
        }
      }
    }
    
    const stats = {
      totalUsers: totalUsers,
      totalBalance: totalBalance,
      averageBalance: totalUsers > 0 ? totalBalance / totalUsers : 0,
      strategies: strategies
    };
    
    Logger.log('Statistics:', stats);
    return stats;
  } catch (error) {
    Logger.log('Error getting statistics: ' + error.toString());
    return null;
  }
}

/**
 * –¢–†–ò–ì–ì–ï–†–´ –ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø
 */

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
 */
function createSheetChangesTrigger() {
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => {
    if (trigger.getHandlerFunction() === 'onSheetEdit') {
      ScriptApp.deleteTrigger(trigger);
    }
  });
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
  ScriptApp.newTrigger('onSheetEdit')
    .onEdit()
    .create();
    
  Logger.log('Sheet changes trigger created');
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
 */
function onSheetEdit(e) {
  try {
    const range = e.range;
    const sheet = e.source.getActiveSheet();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–º –ª–∏—Å—Ç–µ –∏ –≤ —Å—Ç–æ–ª–±—Ü–µ C (–±–∞–ª–∞–Ω—Å)
    if (sheet.getName() === SHEET_NAME && range.getColumn() === 3) {
      const row = range.getRow();
      if (row > 1) { // –ù–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        const username = sheet.getRange(row, 1).getValue();
        const newBalance = range.getValue();
        const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        sheet.getRange(row, 4).setValue(timestamp);
        
        Logger.log(`Admin manually changed balance for user ${username} to ${newBalance}`);
        
        sendAdminNotification(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –∏–∑–º–µ–Ω–µ–Ω –≤—Ä—É—á–Ω—É—é –Ω–∞ ${newBalance} ‚úß`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if (isNaN(newBalance) || newBalance < 0) {
          sendAdminNotification(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${username}: ${newBalance}`);
        }
      }
    }
  } catch (error) {
    Logger.log('Error in onSheetEdit: ' + error.toString());
    sendAdminNotification(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${error.toString()}`);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function createDailyStatsTrigger() {
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => {
    if (trigger.getHandlerFunction() === 'sendDailyStats') {
      ScriptApp.deleteTrigger(trigger);
    }
  });
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
  ScriptApp.newTrigger('sendDailyStats')
    .timeBased()
    .everyDays(1)
    .atHour(9)
    .create();
    
  Logger.log('Daily stats trigger created');
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω—É
 */
function sendDailyStats() {
  try {
    const stats = getStatistics();
    if (!stats) return;
    
    const message = `üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ HomerBot:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.totalBalance.toFixed(2)} ‚úß
üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${stats.averageBalance.toFixed(2)} ‚úß

üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: ${stats.strategies.standard}
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: ${stats.strategies.balanced}
‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è: ${stats.strategies.aggressive}`;

    sendAdminNotification(message);
    Logger.log('Daily stats sent');
  } catch (error) {
    Logger.log('Error sending daily stats: ' + error.toString());
  }
}

/**
 * –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï
 * 
 * 1. –ó–∞–º–µ–Ω–∏—Ç–µ SHEET_ID, BOT_TOKEN, ADMIN_CHAT_ID –Ω–∞ –≤–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è
 * 2. –†–∞–∑–≤–µ—Ä—Ç–∏—Ç–µ –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–æ–º "–í—Å–µ"
 * 3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É:
 *    - initializeSheet()          // —Å–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
 *    - setupTelegramWebhook()     // –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è –∫–Ω–æ–ø–æ–∫
 *    - createSheetChangesTrigger() // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 *    - createDailyStatsTrigger()   // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * 4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ HTML-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */