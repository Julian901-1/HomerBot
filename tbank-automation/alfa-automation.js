import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Use stealth plugin to avoid detection
puppeteer.use(StealthPlugin());

/**
 * Alfa-Bank Automation Class
 * Handles login, transfers, and interactions with Alfa-Bank web interface
 */
export class AlfaAutomation {
  constructor({ username, phone, cardNumber, encryptionService }) {
    this.username = username;
    this.phone = phone; // Encrypted
    this.cardNumber = cardNumber; // Encrypted
    this.encryptionService = encryptionService;

    this.browser = null;
    this.page = null;
    this.authenticated = false;

    // SMS code handling
    this.pendingInputType = null;
    this.pendingInputData = null;
    this.alfaSmsCode = null;
    this.alfaSmsCodeResolver = null;

    // Session stats
    this.sessionStartTime = Date.now();
  }

  /**
   * Random delay to mimic human behavior
   */
  async randomDelay(min = 1000, max = 3000) {
    const delay = Math.floor(Math.random() * (max - min + 1)) + min;
    await new Promise(resolve => setTimeout(resolve, delay));
  }

  /**
   * Simple sleep helper
   * @param {number} ms
   * @returns {Promise<void>}
   */
  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Take base64 screenshot for logging
   * @param {string} context - Context description
   */
  async takeScreenshot(context = 'unknown') {
    if (!this.page) return null;

    try {
      const screenshot = await this.page.screenshot({ encoding: 'base64', type: 'png' });
      console.log(`[ALFA] üì∏ [${context}] Screenshot captured (base64 length: ${screenshot.length})`);
      console.log(`[ALFA] üì∏ === SCREENSHOT BASE64 START [${context}] ===`);
      console.log(screenshot);
      console.log(`[ALFA] üì∏ === SCREENSHOT BASE64 END [${context}] ===`);
      return screenshot;
    } catch (e) {
      console.log(`[ALFA] ‚ö†Ô∏è [${context}] Could not capture screenshot:`, e.message);
      return null;
    }
  }

  /**
   * Initialize browser
   */
  async initBrowser() {
    console.log('[ALFA-BROWSER] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');

    // Kill any stray Chrome/Chromium processes before launching
    try {
      console.log(`[ALFA-BROWSER] Checking for existing browser processes...`);
      const { exec } = await import('child_process');
      const { promisify } = await import('util');
      const execAsync = promisify(exec);

      if (process.platform === 'win32') {
        await execAsync('taskkill /F /IM chrome.exe /T 2>nul || exit 0').catch(() => {});
        await execAsync('taskkill /F /IM chromium.exe /T 2>nul || exit 0').catch(() => {});
      } else {
        // Linux/macOS - kill all Chrome processes
        await execAsync('pkill -9 chrome || true').catch(() => {});
        await execAsync('pkill -9 chromium || true').catch(() => {});
      }
      console.log(`[ALFA-BROWSER] Cleaned up any existing browser processes`);
    } catch (err) {
      console.log(`[ALFA-BROWSER] No existing processes to clean up`);
    }

    this.browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu',
        '--disable-software-rasterizer',
        '--disable-extensions',
        '--disable-background-networking',
        '--disable-sync',
        '--metrics-recording-only',
        '--mute-audio',
        '--no-default-browser-check',
        '--disable-hang-monitor',
        '--disable-prompt-on-repost',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-features=TranslateUI,BlinkGenPropertyTrees',
        '--disable-ipc-flooding-protection',
        '--disable-client-side-phishing-detection',
        '--single-process'
      ]
    });

    this.page = await this.browser.newPage();

    this.page.on('console', msg => {
      const text = msg.text();
      if (text.includes('Found box') || text.includes('matching one of selectors')) {
        return;
      }
      console.log('ALFA PAGE LOG:', text);
    });

    // Set viewport
    await this.page.setViewport({ width: 1366, height: 768 });

    // Set user agent
    await this.page.setUserAgent(
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    );

    console.log('[ALFA-BROWSER] ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * Login to Alfa-Bank
   */
  async loginAlfa() {
    try {
      console.log('[ALFA-LOGIN] –ù–∞—á–∞–ª–æ –≤—Ö–æ–¥–∞ –≤ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫');

      if (!this.browser) {
        await this.initBrowser();
      }

      // Decrypt credentials (if encryptionService is available, otherwise use as-is)
      const phone = this.encryptionService ? this.encryptionService.decrypt(this.phone) : this.phone;
      const cardNumber = this.encryptionService ? this.encryptionService.decrypt(this.cardNumber) : this.cardNumber;

      console.log('[ALFA-LOGIN] –≠—Ç–∞–ø 1/9: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ web.alfabank.ru');
      await this.page.goto('https://web.alfabank.ru/', {
        waitUntil: 'networkidle2',
        timeout: 30000
      });
      await this.randomDelay(2000, 4000);

      console.log('[ALFA-LOGIN] –≠—Ç–∞–ø 2/9: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      await this.page.waitForSelector('input[data-test-id="phoneInput"]', { timeout: 10000 });
      await this.page.type('input[data-test-id="phoneInput"]', phone, { delay: 100 });
      await this.randomDelay(500, 1000);

      console.log('[ALFA-LOGIN] –≠—Ç–∞–ø 3/9: –ù–∞–∂–∞—Ç–∏–µ "–í–ø–µ—Ä—ë–¥"');
      await this.page.click('button.phone-auth-browser__submit-button[type="submit"]');
      await this.randomDelay(2000, 3000);

      console.log('[ALFA-LOGIN] –≠—Ç–∞–ø 4/9: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã');
      await this.page.waitForSelector('input[data-test-id="card-input"]', { timeout: 10000 });
      await this.page.type('input[data-test-id="card-input"]', cardNumber, { delay: 100 });
      await this.randomDelay(500, 1000);

      console.log('[ALFA-LOGIN] –≠—Ç–∞–ø 5/9: –ù–∞–∂–∞—Ç–∏–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"');
      await this.page.click('button[data-test-id="card-continue-button"]');
      await this.randomDelay(2000, 3000);

      console.log('[ALFA-LOGIN] –≠—Ç–∞–ø 6/9: –û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞');
      this.pendingInputType = 'alfa_sms';
      this.pendingInputData = {
        message: '–û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞ –æ—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞'
      };

      await this.waitForAlfaSMSCode(120000); // 2 minutes timeout

      console.log('[ALFA-LOGIN] –≠—Ç–∞–ø 7/9: –í–≤–æ–¥ SMS-–∫–æ–¥–∞');
      await this.page.waitForSelector('input.code-input__input_71x65', { timeout: 10000 });
      await this.enterAlfaSMSCode(this.alfaSmsCode);
      await this.randomDelay(2000, 4000);

      console.log('[ALFA-LOGIN] –≠—Ç–∞–ø 8/9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      const postLoginTimeout = 30000;
      const pollInterval = 1000;
      const postLoginStart = Date.now();
      let dashboardReached = false;
      let trustPromptVisible = false;

      while (Date.now() - postLoginStart < postLoginTimeout) {
        let hasTrustPrompt = false;
        try {
          hasTrustPrompt = await this.page.evaluate(() => {
            const targetText = '–î–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É?';
            if (!document.body) {
              return false;
            }

            const elements = Array.from(document.querySelectorAll('body *'));
            return elements.some(element => {
              if (!element.textContent) {
                return false;
              }

              const normalizedText = element.textContent
                .replace(/\u00A0/g, ' ')
                .replace(/\s+/g, ' ')
                .trim();

              if (!normalizedText.includes(targetText)) {
                return false;
              }

              const style = window.getComputedStyle(element);
              if (!style) {
                return false;
              }

              if (style.display === 'none' || style.visibility === 'hidden' || Number(style.opacity) === 0) {
                return false;
              }

              const rect = element.getBoundingClientRect();
              return rect.width > 0 && rect.height > 0;
            });
          });
        } catch (evaluateError) {
          const errorMessage = evaluateError?.message || '';
          if (
            errorMessage.includes('Execution context was destroyed') ||
            errorMessage.includes('Cannot find context') ||
            errorMessage.includes('Target closed')
          ) {
            await new Promise(resolve => setTimeout(resolve, 250));
            continue;
          }
          throw evaluateError;
        }

        if (hasTrustPrompt) {
          trustPromptVisible = true;
          break;
        }

        const currentUrl = this.page.url();
        if (currentUrl.includes('web.alfabank.ru/dashboard')) {
          dashboardReached = true;
          break;
        }

        await new Promise(resolve => setTimeout(resolve, pollInterval));
      }

      if (!dashboardReached && !trustPromptVisible) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: –Ω–∏ –¥–∞—à–±–æ—Ä–¥, –Ω–∏ –¥–∏–∞–ª–æ–≥ –¥–æ–≤–µ—Ä–∏—è –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥');
      }

      console.log('[ALFA-LOGIN] –≠—Ç–∞–ø 9/9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ª–æ–≥–∞ "–î–æ–≤–µ—Ä—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É?"');

      if (trustPromptVisible) {
        console.log('[ALFA-LOGIN] –ù–∞–π–¥–µ–Ω –¥–∏–∞–ª–æ–≥ "–î–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É?", –Ω–∞–∂–∏–º–∞–µ–º "–ù–µ –¥–æ–≤–µ—Ä—è—Ç—å"');

        const trustCancelButton = await this.page.waitForSelector('button[data-test-id="trust-device-page-cancel-btn"]', {
          timeout: 5000
        }).catch(() => null);

        if (trustCancelButton) {
          await trustCancelButton.click();
          await this.randomDelay(1000, 2000);
        } else {
          console.log('[ALFA-LOGIN] ‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ "–ù–µ –¥–æ–≤–µ—Ä—è—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–ª–∏–∫–∞');
        }

        try {
          await this.page.waitForFunction(
            () => window.location.href.includes('web.alfabank.ru/dashboard'),
            { timeout: 20000 }
          );
          dashboardReached = true;
        } catch (navError) {
          console.log(`[ALFA-LOGIN] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ–≤–µ—Ä–∏–∏: ${navError.message}`);
        }
      } else {
        console.log('[ALFA-LOGIN] –î–∏–∞–ª–æ–≥ –¥–æ–≤–µ—Ä–∏—è –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º');
        await this.randomDelay(500, 1000);
      }

      if (!dashboardReached) {
        throw new Error('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥');
      }

      this.authenticated = true;
      this.pendingInputType = null;
      this.pendingInputData = null;

      console.log('[ALFA-LOGIN] ‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω');

      return { success: true };

    } catch (error) {
      console.error('[ALFA-LOGIN] ‚ùå –û—à–∏–±–∫–∞:', error.message);

      // Take error screenshot
      await this.takeScreenshot('alfa-login-error');

      this.pendingInputType = null;
      this.pendingInputData = null;
      throw error;
    }
  }

  /**
   * Wait for Alfa SMS code
   */
  async waitForAlfaSMSCode(timeout = 120000) {
    return new Promise((resolve, reject) => {
      this.alfaSmsCodeResolver = resolve;

      const timeoutId = setTimeout(() => {
        this.alfaSmsCodeResolver = null;
        reject(new Error('Alfa SMS code timeout'));
      }, timeout);

      // Store timeout ID to clear it when code arrives
      this.alfaSmsCodeTimeout = timeoutId;
    });
  }

  /**
   * Submit Alfa SMS code (called from external API)
   */
  submitAlfaSMSCode(code) {
    // Only log if this is a new code (prevent spam from 500ms interval checker)
    if (this.alfaSmsCode !== code) {
      console.log(`[ALFA-LOGIN] –ü–æ–ª—É—á–µ–Ω SMS-–∫–æ–¥: ${code}`);
      this.alfaSmsCode = code;
    }

    if (this.alfaSmsCodeResolver) {
      clearTimeout(this.alfaSmsCodeTimeout);
      this.alfaSmsCodeResolver(code);
      this.alfaSmsCodeResolver = null;
    }
  }

  /**
   * Enter Alfa SMS code into 4 separate inputs
   */
  async enterAlfaSMSCode(code) {
    const inputs = await this.page.$$('input.code-input__input_71x65');

    if (inputs.length < 4) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ 4 –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ SMS-–∫–æ–¥–∞');
    }

    for (let i = 0; i < 4 && i < code.length; i++) {
      await inputs[i].click();
      await this.randomDelay(100, 300);
      await inputs[i].type(code[i]);
      await this.randomDelay(300, 500);
    }
  }

  /**
   * Get Alfa saving accounts
   */
  async getAlfaSavingAccounts() {
    try {
      console.log('[ALFA-ACCOUNTS] –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤');

      if (!this.authenticated) {
        throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–µ');
      }

      // Navigate to dashboard if not already there
      const currentUrl = this.page.url();
      if (!currentUrl.includes('/dashboard')) {
        await this.page.goto('https://web.alfabank.ru/dashboard', {
          waitUntil: 'networkidle2'
        });
        await this.randomDelay(2000, 3000);
      }

      // Find saving accounts by data-test-id pattern
      const savingAccounts = [];

      const accountElements = await this.page.$$('section[data-test-id^="product-view-component-"]');

      for (const element of accountElements) {
        try {
          // Check if it's a saving account
          const titleElement = await element.$('p.SaH2t');
          if (!titleElement) continue;

          const title = await this.page.evaluate(el => el.textContent, titleElement);

          // –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç contains "–ê–ª—å—Ñ–∞-–°—á—ë—Ç" or "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π"
          if (title.includes('–ê–ª—å—Ñ–∞-–°—á—ë—Ç') || title.includes('–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π')) {
            const testId = await this.page.evaluate(el => el.getAttribute('data-test-id'), element);
            const accountId = testId.replace('product-view-component-', '');

            // Get balance
            const balanceElement = await element.$('span[data-test-id="product-view-amount"]');
            let balance = '0';
            if (balanceElement) {
              balance = await this.page.evaluate(el => el.textContent, balanceElement);
            }

            savingAccounts.push({
              id: accountId,
              name: title.trim(),
              balance: balance.trim()
            });
          }
        } catch (err) {
          console.error('[ALFA-ACCOUNTS] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—á—ë—Ç–∞:', err.message);
        }
      }

      console.log(`[ALFA-ACCOUNTS] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${savingAccounts.length} –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤`);
      return savingAccounts;

    } catch (error) {
      console.error('[ALFA-ACCOUNTS] ‚ùå –û—à–∏–±–∫–∞:', error.message);
      throw error;
    }
  }

  /**
   * Ensure dashboard is visible by checking key indicators and handling the trust dialog
   * @param {string} prefix - Log prefix used to identify caller context
   * @returns {{ready: boolean, state: object, missing: string[]}} Dashboard readiness report
   */
  async ensureDashboardReady(prefix = '[ALFA]') {
    const log = message => console.log(`${prefix} ${message}`);
    let finalState = null;

    try {
      await this.page.waitForFunction(
        () => window.location.href.includes('web.alfabank.ru/dashboard'),
        { timeout: 3000 }
      );
    } catch {
      await this.page.goto('https://web.alfabank.ru/dashboard', {
        waitUntil: 'domcontentloaded'
      });
    }

    const dashboardTimeout = 15000;
    const checkInterval = 1000;
    const start = Date.now();

    while (Date.now() - start < dashboardTimeout) {
      const dashboardState = await this.page.evaluate(() => {
        const normalize = text => (text || '').replace(/\s+/g, ' ').trim();

        const hasProductsHeader = Array.from(document.querySelectorAll('h3')).some(
          header => normalize(header.textContent) === '–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã'
        );

        const hasSettingsButton = Boolean(
          document.querySelector('button[data-test-id="hidden-products-settings-button"]')
        );

        const hasQuickActionsHeader = Boolean(
          document.querySelector('h3[data-test-id="quick-actions-header-my-payments"]')
        );

        const trustButton = document.querySelector('button[data-test-id="trust-device-page-cancel-btn"]');
        let trustPromptVisible = false;

        if (trustButton) {
          const style = window.getComputedStyle(trustButton);
          if (
            style &&
            style.display !== 'none' &&
            style.visibility !== 'hidden' &&
            Number(style.opacity) !== 0
          ) {
            const rect = trustButton.getBoundingClientRect();
            trustPromptVisible = rect.width > 0 && rect.height > 0;
          }
        }

        return {
          hasProductsHeader,
          hasSettingsButton,
          hasQuickActionsHeader,
          trustPromptVisible
        };
      });

      finalState = dashboardState;

      if (
        dashboardState.hasProductsHeader ||
        dashboardState.hasSettingsButton ||
        dashboardState.hasQuickActionsHeader
      ) {
        const indicators = [];
        if (dashboardState.hasProductsHeader) indicators.push('–∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã"');
        if (dashboardState.hasSettingsButton) indicators.push('–∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
        if (dashboardState.hasQuickActionsHeader) indicators.push('—Å–µ–∫—Ü–∏—è "–ú–æ–∏ –ø–ª–∞—Ç–µ–∂–∏"');
        log(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞: ${indicators.join(', ')}`);
        return { ready: true, state: dashboardState, missing: [] };
      }

      if (dashboardState.trustPromptVisible) {
        log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏–∞–ª–æ–≥ "–î–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É?", –Ω–∞–∂–∏–º–∞–µ–º "–ù–µ –¥–æ–≤–µ—Ä—è—Ç—å"');
        try {
          await this.page.click('button[data-test-id="trust-device-page-cancel-btn"]');
          await this.sleep(2000);
        } catch (err) {
          log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å "–ù–µ –¥–æ–≤–µ—Ä—è—Ç—å": ${err.message}`);
        }
      }

      await this.sleep(checkInterval);
    }

    if (finalState) {
      log(`–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞: ${JSON.stringify(finalState)}`);
    } else {
      log('–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
    }

    const missing = [];
    if (!finalState?.hasProductsHeader) missing.push('–∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã"');
    if (!finalState?.hasSettingsButton) missing.push('–∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    if (!finalState?.hasQuickActionsHeader) missing.push('—Å–µ–∫—Ü–∏—è "–ú–æ–∏ –ø–ª–∞—Ç–µ–∂–∏"');
    if (finalState?.trustPromptVisible) missing.push('–¥–∏–∞–ª–æ–≥ "–î–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É?" –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç');

    return {
      ready: false,
      state: finalState || {},
      missing
    };
  }

  /**
   * Parse localized money strings (e.g., "16¬†223,70 ‚ÇΩ") to float
   * @param {string} value
   * @returns {number}
   */
  parseMoneyString(value) {
    if (typeof value !== 'string') {
      return 0;
    }

    const normalized = value
      .replace(/\u00A0/g, ' ')
      .replace(/[^\d,.,-]/g, '')
      .replace(/\s+/g, '')
      .replace(',', '.');

    const parsed = parseFloat(normalized);
    return Number.isFinite(parsed) ? parsed : 0;
  }

  /**
   * Transfer to Alfa saving account
   * (from Alfa debit account to Alfa saving account)
   */
  async transferToAlfaSaving(savingAccountId, amount) {
    try {
      console.log(`[ALFA‚ÜíSAVING] –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞ ${amount}‚ÇΩ –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç`);

      if (!this.authenticated) {
        throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–µ');
      }

      const waitBetweenSteps = async () => {
        await this.sleep(15000);
      };

      console.log('[ALFA‚ÜíSAVING] –≠—Ç–∞–ø 1/6: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∞—à–±–æ—Ä–¥');

      const dashboardStatus = await this.ensureDashboardReady('[ALFA‚ÜíSAVING]');
      if (!dashboardStatus.ready) {
        const details = dashboardStatus.missing.length
          ? `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: ${dashboardStatus.missing.join(', ')}`
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞';
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. ${details}`);
      }

      console.log(`[ALFA‚ÜíSAVING] –ò—Å—Ç–æ—á–Ω–∏–∫ —Å—Ä–µ–¥—Å—Ç–≤: —Å—á—ë—Ç ${savingAccountId}`);

      await waitBetweenSteps();

      console.log('[ALFA‚ÜíSAVING] –≠—Ç–∞–ø 2/6: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏');
      const requiredSavingAccountId = '40817810506220141175';
      if (savingAccountId && savingAccountId !== requiredSavingAccountId) {
        console.log(`[ALFA‚ÜíSAVING] ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å—á—ë—Ç ${requiredSavingAccountId} –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ ${savingAccountId}`);
      }
      const transferUrl = `https://web.alfabank.ru/transfers/account-to-account?destinationAccount=${requiredSavingAccountId}&type=FROM_ALFA_ACCOUNT`;
      await this.page.goto(transferUrl, { waitUntil: 'domcontentloaded' });
      await waitBetweenSteps();

      console.log('[ALFA‚ÜíSAVING] –≠—Ç–∞–ø 3/6: –í—ã–±–æ—Ä —Å—á—ë—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è "–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç ¬∑¬∑7167"');
      const accountOptionSelector = 'div[data-test-id="src-account-option"]';
      const optionsListSelector = 'div[data-test-id="src-account-options-list"]';

      const ensureAccountDropdownOpen = async () => {
        const optionVisible = await this.page.$(accountOptionSelector);
        if (optionVisible) return;

        const triggerSelectors = [
          '[data-test-id="src-account-select"]',
          '[data-test-id="src-account-selector"]',
          '[data-test-id="src-account-dropdown"]',
          '[data-test-id="src-account"] button',
          '[aria-haspopup="listbox"][role="combobox"]',
          'button[aria-haspopup="listbox"]',
          '[data-test-id="src-account-options-trigger"]'
        ];

        for (const selector of triggerSelectors) {
          const handle = await this.page.$(selector);
          if (handle) {
            await handle.click();
            await this.sleep(500);
            const check = await this.page.$(accountOptionSelector);
            if (check) return;
          }
        }

        await this.page.evaluate(() => {
          const candidates = Array.from(
            document.querySelectorAll('[aria-haspopup="listbox"], [data-test-id]')
          );

          for (const candidate of candidates) {
            if (!(candidate instanceof HTMLElement)) continue;

            const dataset = candidate.dataset || {};
            const isSourceTrigger = Object.keys(dataset).some(key =>
              key.toLowerCase().includes('src') && key.toLowerCase().includes('account')
            );

            if (isSourceTrigger || candidate.getAttribute('role') === 'combobox') {
              candidate.click();
              break;
            }
          }
        });
        await this.sleep(500);
      };

      await ensureAccountDropdownOpen();
      await this.page.waitForSelector(`${optionsListSelector}, ${accountOptionSelector}`, { timeout: 60000 });
      await ensureAccountDropdownOpen();
      await this.page.waitForSelector(accountOptionSelector, { timeout: 60000 });

      await this.page.evaluate(() => {
        const options = Array.from(document.querySelectorAll('div[data-test-id="src-account-option"]'));
        const targetOption = options.find(opt => opt.textContent.includes('¬∑¬∑7167'));
        if (targetOption instanceof HTMLElement) {
          targetOption.click();
        }
      });

      await waitBetweenSteps();

      console.log('[ALFA‚ÜíSAVING] –≠—Ç–∞–ø 4/6: –ù–∞–∂–∞—Ç–∏–µ "–í—Å—ë"');
      await this.page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const allButton = buttons.find(btn => btn.textContent.includes('–í—Å—ë'));
        if (allButton) allButton.click();
      });

      await waitBetweenSteps();

      console.log('[ALFA‚ÜíSAVING] –≠—Ç–∞–ø 5/6: –ù–∞–∂–∞—Ç–∏–µ "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"');
      await this.page.waitForSelector('button[data-test-id="payment-button"]', { timeout: 15000 });
      await this.page.click('button[data-test-id="payment-button"]');

      await waitBetweenSteps();

      console.log('[ALFA‚ÜíSAVING] –≠—Ç–∞–ø 6/6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
      await waitBetweenSteps();

      console.log('[ALFA‚ÜíSAVING] ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω');

      // Take confirmation screenshot
      await this.takeScreenshot('alfa-to-saving-success');

      return { success: true, amount };

    } catch (error) {
      console.error('[ALFA‚ÜíSAVING] ‚ùå –û—à–∏–±–∫–∞:', error.message);

      // Take error screenshot
      await this.takeScreenshot('alfa-to-saving-error');

      throw error;
    }
  }

  /**
   * Transfer from Alfa saving account to Alfa debit account
   */
  async transferFromAlfaSaving(savingAccountId, toAccountName, amount) {
    try {
      const amountLabel = amount != null ? `${amount}‚ÇΩ` : '–ø–æ–ª–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞';
      console.log(`[SAVING‚ÜíALFA] –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞ ${amountLabel} —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞`);

      if (!this.authenticated) {
        throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–µ');
      }

      const waitBetweenSteps = async () => {
        await this.sleep(15000);
      };

      console.log('[SAVING‚ÜíALFA] –≠—Ç–∞–ø 1/7: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∞—à–±–æ—Ä–¥');
      const dashboardStatus = await this.ensureDashboardReady('[SAVING‚ÜíALFA]');
      if (!dashboardStatus.ready) {
        const details = dashboardStatus.missing.length
          ? `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: ${dashboardStatus.missing.join(', ')}`
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞';
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. ${details}`);
      }

      await waitBetweenSteps();

      console.log('[SAVING‚ÜíALFA] –≠—Ç–∞–ø 2/7: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ —Å—á–µ—Ç–∞–º–∏');
      const transferUrl = `https://web.alfabank.ru/transfers/account-to-account?sourceAccount=${savingAccountId}`;
      await this.page.goto(transferUrl, { waitUntil: 'domcontentloaded' });
      await waitBetweenSteps();

      console.log('[SAVING‚ÜíALFA] –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—è "–ö—É–¥–∞"...');
      console.log(`[SAVING‚ÜíALFA] –≠—Ç–∞–ø 3/7: –í—ã–±–æ—Ä —Å—á—ë—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è "${toAccountName}"`);
      const destOptionSelector = 'div[data-test-id="dest-account-option"]';
      const destListSelector = 'div[data-test-id="dest-account-options-list"]';

      const ensureDestinationDropdownOpen = async () => {
        const optionVisible = await this.page.$(destOptionSelector);
        if (optionVisible) return;

        const triggerSelectors = [
          '[data-test-id="dest-account-select"]',
          '[data-test-id="dest-account-selector"]',
          '[data-test-id="dest-account-dropdown"]',
          '[data-test-id="dest-account"] button',
          'button[aria-haspopup="listbox"]',
          '[aria-haspopup="listbox"][role="combobox"]',
          '[data-test-id="dest-account-options-trigger"]'
        ];

        for (const selector of triggerSelectors) {
          const handle = await this.page.$(selector);
          if (handle) {
            await handle.click();
            await this.sleep(500);
            const check = await this.page.$(destOptionSelector);
            if (check) return;
          }
        }

        await this.page.evaluate(() => {
          const candidates = Array.from(document.querySelectorAll('[aria-haspopup="listbox"], [data-test-id]'));
          for (const candidate of candidates) {
            if (!(candidate instanceof HTMLElement)) continue;
            const dataset = candidate.dataset || {};
            const matchesDataset = Object.keys(dataset).some(key =>
              key.toLowerCase().includes('dest') && key.toLowerCase().includes('account')
            );
            if (matchesDataset || candidate.getAttribute('role') === 'combobox') {
              candidate.click();
              break;
            }
          }
        });
        await this.sleep(500);
      };

      await ensureDestinationDropdownOpen();
      await this.page.waitForSelector(`${destListSelector}, ${destOptionSelector}`, { timeout: 60000 });
      await ensureDestinationDropdownOpen();

      const destinationSelected = await this.page.evaluate((targetName) => {
        const normalize = text => (text || '').replace(/\s+/g, ' ').trim();
        const targetNormalized = normalize(targetName);
        const options = Array.from(document.querySelectorAll('div[data-test-id="dest-account-option"]'));
        const targetOption = options.find(opt => normalize(opt.textContent).includes(targetNormalized));
        if (targetOption instanceof HTMLElement) {
          targetOption.scrollIntoView({ block: 'center' });
          targetOption.click();
          return true;
        }
        return false;
      }, toAccountName);

      if (!destinationSelected) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å—á—ë—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è "${toAccountName}"`);
      }

      await waitBetweenSteps();

      console.log('[SAVING‚ÜíALFA] –≠—Ç–∞–ø 4/7: –ù–∞–∂–∞—Ç–∏–µ "–í—Å—ë"');
      const allClicked = await this.page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const allButton = buttons.find(btn => btn.textContent.includes('–í—Å—ë'));
        if (allButton) {
          allButton.click();
          return true;
        }
        return false;
      });

      if (!allClicked) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í—Å—ë"');
      }

      await waitBetweenSteps();

      console.log('[SAVING‚ÜíALFA] –≠—Ç–∞–ø 5/7: –ù–∞–∂–∞—Ç–∏–µ "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"');
      await this.page.waitForSelector('button[data-test-id="payment-button"]', { timeout: 15000 });
      await this.page.click('button[data-test-id="payment-button"]');

      await waitBetweenSteps();

      console.log('[SAVING‚ÜíALFA] –≠—Ç–∞–ø 6/7: –ù–∞–∂–∞—Ç–∏–µ "–ì–æ—Ç–æ–≤–æ"');
      await this.page.waitForSelector('button[data-test-id="ready-button"]', { timeout: 15000 });
      await this.page.click('button[data-test-id="ready-button"]');
      await this.sleep(10000);

      console.log('[SAVING‚ÜíALFA] –≠—Ç–∞–ø 7/7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
      console.log('[SAVING‚ÜíALFA] ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω');

      await this.takeScreenshot('saving-to-alfa-success');

      return { success: true, amount };

    } catch (error) {
      console.error('[SAVING‚ÜíALFA] ‚ùå –û—à–∏–±–∫–∞:', error.message);

      await this.takeScreenshot('saving-to-alfa-error');

      throw error;
    }
  }

  /**
   * Transfer from Alfa to T-Bank via SBP
   * @param {string} savingAccountId - Alfa account identifier (used for logging/tracing)
   * @param {string} recipientPhone - Phone number linked to T-Bank for SBP transfer
   * @param {?number} amount - Optional transfer amount (if null, full balance is used)
   */
  async transferToTBankSBP(savingAccountId, recipientPhone, amount) {
    try {
      const requestedAmountLabel = amount != null ? `${amount}‚ÇΩ` : '–ø–æ–ª–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞';
      console.log(`[ALFA‚ÜíTBANK] –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞ ${requestedAmountLabel} –Ω–∞ –¢-–ë–∞–Ω–∫ —á–µ—Ä–µ–∑ –°–ë–ü`);

      if (!this.authenticated) {
        throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–µ');
      }

      const waitBetweenSteps = async () => {
        await this.sleep(15000);
      };

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 1/12: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∞—à–±–æ—Ä–¥');
      const dashboardStatus = await this.ensureDashboardReady('[ALFA‚ÜíTBANK]');
      if (!dashboardStatus.ready) {
        const details = dashboardStatus.missing.length
          ? `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: ${dashboardStatus.missing.join(', ')}`
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞';
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. ${details}`);
      }

      await waitBetweenSteps();

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 2/12: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      await this.page.goto('https://web.alfabank.ru/transfers/phone', {
        waitUntil: 'domcontentloaded'
      });
      await waitBetweenSteps();

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 3/12: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
      await this.page.waitForSelector('input[data-test-id="phone-intl-input"]', { timeout: 15000 });
      const trimmedPhone = typeof recipientPhone === 'string' ? recipientPhone.trim() : '';
      const normalizedPhone = trimmedPhone
        ? (trimmedPhone.startsWith('+') ? trimmedPhone : `+${trimmedPhone}`)
        : '';
      await this.page.evaluate(phone => {
        const input = document.querySelector('input[data-test-id="phone-intl-input"]');
        if (input) {
          input.focus();
          const nativeSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;
          nativeSetter.call(input, '');
          input.dispatchEvent(new Event('input', { bubbles: true }));
          nativeSetter.call(input, phone);
          input.dispatchEvent(new Event('input', { bubbles: true }));
          input.dispatchEvent(new Event('change', { bubbles: true }));
        }
      }, normalizedPhone);
      await waitBetweenSteps();

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 4/12: –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ "–°–µ–±–µ –≤ –¥—Ä—É–≥–æ–π –±–∞–Ω–∫"');
      await this.page.waitForSelector('button[data-test-id="phone-list-item"]', { timeout: 15000 });
      await this.page.evaluate(() => {
        const items = Array.from(document.querySelectorAll('button[data-test-id="phone-list-item"]'));
        const selfTransfer = items.find(item => item.textContent.includes('–°–µ–±–µ –≤ –¥—Ä—É–≥–æ–π –±–∞–Ω–∫'));
        if (selfTransfer) selfTransfer.click();
      });
      await waitBetweenSteps();

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 5/12: –í—ã–±–æ—Ä –±–∞–Ω–∫–∞ "–¢-–ë–∞–Ω–∫"');
      await this.page.evaluate(() => {
        const sections = Array.from(document.querySelectorAll('section'));
        const tbankSection = sections.find(s => s.textContent.includes('–¢-–ë–∞–Ω–∫'));
        if (tbankSection) tbankSection.click();
      });
      await waitBetweenSteps();

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 6/12: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞');
      const accountBalance = await this.page.evaluate(() => {
        const amountElement = document.querySelector('span[data-test-id="amount"]');
        return amountElement ? amountElement.textContent : '0';
      });
      console.log(`[ALFA‚ÜíTBANK] –ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞: ${accountBalance}`);

      let transferAmount = amount != null ? Number(String(amount).replace(',', '.')) : this.parseMoneyString(accountBalance);
      if (!Number.isFinite(transferAmount) || transferAmount <= 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞');
      }
      transferAmount = Math.round(transferAmount * 100) / 100;
      console.log(`[ALFA‚ÜíTBANK] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞: ${transferAmount} RUB`);

      await waitBetweenSteps();

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 7/12: –í–≤–æ–¥ —Å—É–º–º—ã');
      await this.page.waitForSelector('input[name="amount"]', { timeout: 15000 });
      const amountInputValue = transferAmount.toFixed(2).replace('.', ',');
      await this.page.evaluate(value => {
        const input = document.querySelector('input[name="amount"]');
        if (input) {
          input.focus();
          const nativeSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;
          nativeSetter.call(input, '');
          input.dispatchEvent(new Event('input', { bubbles: true }));
          nativeSetter.call(input, value);
          input.dispatchEvent(new Event('input', { bubbles: true }));
          input.dispatchEvent(new Event('change', { bubbles: true }));
        }
      }, amountInputValue);
      await waitBetweenSteps();

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 8/12: –ù–∞–∂–∞—Ç–∏–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"');
      await this.page.waitForSelector('button[type="submit"]', { timeout: 15000 });
      await this.page.click('button[type="submit"]');
      await waitBetweenSteps();

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 9/12: –ù–∞–∂–∞—Ç–∏–µ "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"');
      await this.page.waitForSelector('button[data-test-id="transfer-by-phone-confirmation-submit-btn"]', { timeout: 15000 });
      await this.page.click('button[data-test-id="transfer-by-phone-confirmation-submit-btn"]');
      await waitBetweenSteps();

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 10/12: –û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
      this.pendingInputType = 'alfa_sms';
      this.pendingInputData = {
        message: '–û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞'
      };
      await this.waitForAlfaSMSCode(120000);

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 11/12: –í–≤–æ–¥ SMS-–∫–æ–¥–∞');
      await this.page.waitForSelector('input.KRyR4.uokLS', { timeout: 15000 });
      const codeInputs = await this.page.$$('input.KRyR4.uokLS');
      for (let i = 0; i < 4 && i < this.alfaSmsCode.length; i++) {
        await codeInputs[i].click();
        await this.sleep(150);
        await codeInputs[i].type(this.alfaSmsCode[i]);
        await this.sleep(350);
      }

      await this.sleep(3000);

      console.log('[ALFA‚ÜíTBANK] –≠—Ç–∞–ø 12/12: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
      this.pendingInputType = null;
      this.pendingInputData = null;

      console.log('[ALFA‚ÜíTBANK] ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω');

      await this.takeScreenshot('alfa-to-tbank-success');

      return { success: true, amount: transferAmount };

    } catch (error) {
      console.error('[ALFA‚ÜíTBANK] ‚ùå –û—à–∏–±–∫–∞:', error.message);

      await this.takeScreenshot('alfa-to-tbank-error');

      this.pendingInputType = null;
      this.pendingInputData = null;
      throw error;
    }
  }

  /**
   * Get pending input type
   */
  getPendingInputType() {
    return this.pendingInputType;
  }

  /**
   * Get pending input data
   */
  getPendingInputData() {
    return this.pendingInputData;
  }

  /**
   * Get session stats
   */
  getSessionStats() {
    const now = Date.now();
    const lifetimeMs = now - this.sessionStartTime;
    const lifetimeMinutes = Math.floor(lifetimeMs / 1000 / 60);

    return {
      authenticated: this.authenticated,
      lifetimeMinutes,
      lifetimeMs
    };
  }

  /**
   * Close browser
   */
  async close() {
    try {
      if (this.browser) {
        await this.browser.close();
        this.browser = null;
        this.page = null;
        console.log('[ALFA-BROWSER] ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      }

      // Force kill any remaining browser processes
      try {
        const { exec } = await import('child_process');
        const { promisify } = await import('util');
        const execAsync = promisify(exec);

        if (process.platform === 'win32') {
          await execAsync('taskkill /F /IM chrome.exe /T 2>nul || exit 0').catch(() => {});
          await execAsync('taskkill /F /IM chromium.exe /T 2>nul || exit 0').catch(() => {});
        } else {
          await execAsync('pkill -9 chrome || true').catch(() => {});
          await execAsync('pkill -9 chromium || true').catch(() => {});
        }
        console.log('[ALFA-BROWSER] Force killed any remaining browser processes');
      } catch (err) {
        // Ignore errors
      }
    } catch (error) {
      console.error('[ALFA-BROWSER] –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
    }
  }
}
